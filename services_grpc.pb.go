// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: services.proto

package daobackup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DAOBackup_PutBlob_FullMethodName   = "/daobackup.DAOBackup/PutBlob"
	DAOBackup_CheckBlob_FullMethodName = "/daobackup.DAOBackup/CheckBlob"
	DAOBackup_GetBlob_FullMethodName   = "/daobackup.DAOBackup/GetBlob"
)

// DAOBackupClient is the client API for DAOBackup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DAOBackupClient interface {
	PutBlob(ctx context.Context, in *HashedBlob, opts ...grpc.CallOption) (*RPCStatus, error)
	CheckBlob(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*RPCStatus, error)
	GetBlob(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*HashedBlob, error)
}

type dAOBackupClient struct {
	cc grpc.ClientConnInterface
}

func NewDAOBackupClient(cc grpc.ClientConnInterface) DAOBackupClient {
	return &dAOBackupClient{cc}
}

func (c *dAOBackupClient) PutBlob(ctx context.Context, in *HashedBlob, opts ...grpc.CallOption) (*RPCStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RPCStatus)
	err := c.cc.Invoke(ctx, DAOBackup_PutBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAOBackupClient) CheckBlob(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*RPCStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RPCStatus)
	err := c.cc.Invoke(ctx, DAOBackup_CheckBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAOBackupClient) GetBlob(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*HashedBlob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashedBlob)
	err := c.cc.Invoke(ctx, DAOBackup_GetBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAOBackupServer is the server API for DAOBackup service.
// All implementations must embed UnimplementedDAOBackupServer
// for forward compatibility.
type DAOBackupServer interface {
	PutBlob(context.Context, *HashedBlob) (*RPCStatus, error)
	CheckBlob(context.Context, *Hash) (*RPCStatus, error)
	GetBlob(context.Context, *Hash) (*HashedBlob, error)
	mustEmbedUnimplementedDAOBackupServer()
}

// UnimplementedDAOBackupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDAOBackupServer struct{}

func (UnimplementedDAOBackupServer) PutBlob(context.Context, *HashedBlob) (*RPCStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBlob not implemented")
}
func (UnimplementedDAOBackupServer) CheckBlob(context.Context, *Hash) (*RPCStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlob not implemented")
}
func (UnimplementedDAOBackupServer) GetBlob(context.Context, *Hash) (*HashedBlob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedDAOBackupServer) mustEmbedUnimplementedDAOBackupServer() {}
func (UnimplementedDAOBackupServer) testEmbeddedByValue()                   {}

// UnsafeDAOBackupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAOBackupServer will
// result in compilation errors.
type UnsafeDAOBackupServer interface {
	mustEmbedUnimplementedDAOBackupServer()
}

func RegisterDAOBackupServer(s grpc.ServiceRegistrar, srv DAOBackupServer) {
	// If the following call pancis, it indicates UnimplementedDAOBackupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DAOBackup_ServiceDesc, srv)
}

func _DAOBackup_PutBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashedBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAOBackupServer).PutBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAOBackup_PutBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAOBackupServer).PutBlob(ctx, req.(*HashedBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAOBackup_CheckBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAOBackupServer).CheckBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAOBackup_CheckBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAOBackupServer).CheckBlob(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAOBackup_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAOBackupServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAOBackup_GetBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAOBackupServer).GetBlob(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

// DAOBackup_ServiceDesc is the grpc.ServiceDesc for DAOBackup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAOBackup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daobackup.DAOBackup",
	HandlerType: (*DAOBackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutBlob",
			Handler:    _DAOBackup_PutBlob_Handler,
		},
		{
			MethodName: "CheckBlob",
			Handler:    _DAOBackup_CheckBlob_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _DAOBackup_GetBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
